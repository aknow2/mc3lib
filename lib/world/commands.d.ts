import { Items, Colors } from '../constants';
import { Exec, Position, ErrorMsg } from '../command/executor';
import { Count, Fill, CompareCount } from '../command/result';
import { BlockPosition } from '..';
export declare type SetBlockCommand = (position: Position, tileName: Items, tileData: number | Colors) => void;
export declare const createSetBlockCommand: (sendCommand: Exec<void>) => SetBlockCommand;
export declare type CloneCommand = (begin: Position, end: Position, destination: Position, maskMode?: string, cloneMode?: string, tileName?: string, tileData?: number) => Promise<Count | ErrorMsg>;
export declare const createClone: (sendCommand: Exec<Count>) => (begin: Position, end: Position, destination: Position, maskMode?: string, cloneMode?: string, tileName?: string, tileData?: number) => Promise<ErrorMsg | Count>;
export declare type SummonCommand = (spawnPos: Position, entityType: string) => Promise<Count | ErrorMsg>;
export declare const createSummon: (sendCommand: Exec<Count>) => (spawnPos: Position, entityType: string) => Promise<ErrorMsg | Count>;
export declare type ExecuteAsOther = (target: string, position: Position, command: string) => Promise<void | ErrorMsg>;
export declare const createExecuteAsOther: (sendCommand: Exec<void>) => ExecuteAsOther;
export declare type KillCommand = (target: string) => Promise<void | ErrorMsg>;
export declare const createKill: (sendCommand: Exec<void>) => KillCommand;
export declare type ExecDetectCommand = (target: string, position: Position, detect: string, detectPos: Position, detectBlock: string | Items, detectData: number, command: string) => Promise<void | ErrorMsg>;
export declare const createDetect: (sendCommand: Exec<void>) => ExecDetectCommand;
export declare type FillCommand = (from: Position, to: Position, tileName: string | Items, tileData: number, intData?: number, oldBlockHandling?: number, replaceTileName?: string | Items, replaceDataValue?: number) => Promise<Fill | ErrorMsg>;
export declare const createFill: (sendCommand: Exec<Fill>) => FillCommand;
export declare type WeatherCommand = (type: string, duration: number) => Promise<void | ErrorMsg>;
export declare const createWeather: (sendCommand: Exec<void>) => WeatherCommand;
export declare type TpToTargetPosCommand = (victim: string, destination: Position, yRot?: number, xRot?: number) => Promise<void | ErrorMsg>;
export declare const createTpTargetPos: (sendCommand: Exec<void>) => (victim: string, destination: Position, yRot?: number, xRot?: number) => Promise<void | ErrorMsg>;
export declare type TpTargetToTargetCommand = (victim: string, destination: string, yRot?: number, xRot?: number) => Promise<void | ErrorMsg>;
export declare const createTpTargetToTarget: (sendCommand: Exec<void>) => TpTargetToTargetCommand;
export declare type ChangeTimeByNumberCommand = (time: number) => Promise<void | ErrorMsg>;
export declare const createChangeTimeByNumber: (sendCommand: Exec<void>) => ChangeTimeByNumberCommand;
export declare type ChangeTimeByNameCommand = (time: string) => Promise<void | ErrorMsg>;
export declare const createChangeTimeByName: (sendCommand: Exec<void>) => ChangeTimeByNameCommand;
export declare type TestForBlocks = (compareCount: number, matches: boolean, begin: BlockPosition, end: BlockPosition, destination: BlockPosition, mode?: string) => Promise<CompareCount | ErrorMsg>;
export declare const createTestForBlocks: (sendCommand: Exec<CompareCount>) => (compareCount: number, matches: boolean, begin: Position, end: Position, destination: Position, mode?: string) => Promise<ErrorMsg | CompareCount>;
export declare type TestForBlockCommand = (position: BlockPosition, tileName: string) => Promise<CompareCount | ErrorMsg>;
export declare const createTestForBlock: (sendCommand: Exec<CompareCount>) => (position: Position, tileName: string) => Promise<ErrorMsg | CompareCount>;
export declare type GiveCommand = (player: string, itemName: string | Items, data: number, amount?: number) => Promise<void | ErrorMsg>;
export declare const createGive: (sendCommand: Exec<void>) => GiveCommand;
